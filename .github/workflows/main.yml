name: Release Application

on:
  push:
    branches:
      - master

jobs:
  crate_metadata:
    name: Extract crate metadata
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract crate information
        id: crate_metadata
        run: |
          echo "name=io-tools" | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"version=" + .packages[0].version' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"maintainer=" + .packages[0].authors[0]' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"homepage=" + .packages[0].homepage' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"msrv=" + .packages[0].rust_version' | tee -a $GITHUB_OUTPUT
    outputs:
      name: ${{ steps.crate_metadata.outputs.name }}
      version: ${{ steps.crate_metadata.outputs.version }}
      maintainer: ${{ steps.crate_metadata.outputs.maintainer }}
      homepage: ${{ steps.crate_metadata.outputs.homepage }}
      msrv: ${{ steps.crate_metadata.outputs.msrv }}

  build:
    name: Build ${{ matrix.target }} (${{ matrix.os }})
    needs: crate_metadata
    runs-on: ${{ matrix.os }}
    permissions:
      #      pull-requests: write   # 'write' access to pull requests
      contents: write # We generate static HTML, JS, CSS so we need write access to the repo
    #      pages: write
    #      id-token: write
    #      deployments: write
    #      statuses: write
    #      actions: write
    #      checks: read
    strategy:
      matrix:
        include:
          #          - build: linux
          #            os: ubuntu-latest
          #            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: get env
        run: |
          echo "APP_NAME=${{ needs.crate_metadata.outputs.name }}" >> $GITHUB_ENV
          echo "APP_VERSION=${{ needs.crate_metadata.outputs.version }}" >> $GITHUB_ENV
          echo "MATRIX_TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          echo "MATRIX_OS=${{ matrix.os }}" >> $GITHUB_ENV
          echo "APP_NAME: ${APP_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "APP_VERSION: ${APP_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "MATRIX_TARGET: ${MATRIX_TARGET}" >> $GITHUB_STEP_SUMMARY
          echo "MATRIX_OS: ${MATRIX_OS}" >> $GITHUB_STEP_SUMMARY

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          sh .github/build_archive.sh

      - name: Upload Release - Target
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.asset_target }}
          asset_name: ${{ env.asset_target }}
          tag: build-${GITHUB_REF##*/}-${{ github.sha }}

      - name: Upload Release - Binary
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.asset_binary }}
          asset_name: ${{ env.asset_binary }}
          tag: build-${GITHUB_REF##*/}-${{ github.sha }}
#      - name: Upload binaries to release
#        uses: meeDamian/github-release@2.0
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          tag: build-${GITHUB_REF##*/}-${{ github.sha }}
#          name: My Creative Name
#          body: >
#            This release actually changes the fabric of the reality, so be careful
#            while applying, as error in database migration, can irrecoverably wipe
#            some laws of physics.
#          gzip: folders
#          files: >
#            ${{ env.asset_target }}
#            ${{ env.asset_binary }}

