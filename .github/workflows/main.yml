name: Release Application

on:
  push:
    branches:
      - master

jobs:
  crate_metadata:
    name: Extract crate metadata
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: build env
        shell: bash
        run: python3 .github/create_metadata.py setup
    # echo "NEW_TAG=${{ needs.crate_metadata.outputs.NEW_TAG }}" >> $GITHUB_ENV
    #          echo "NEW_VERSION=${{ needs.crate_metadata.outputs.NEW_VERSION }}" >> $GITHUB_ENV
    #          echo "GUI_NAME=${{ needs.crate_metadata.outputs.GUI_NAME }}" >> $GITHUB_ENV
    #          echo "CLI_NAME=${{ needs.crate_metadata.outputs.CLI_NAME }}" >> $GITHUB_ENV
    #          echo "APP_VERSION=${{ needs.crate_metadata.outputs.APP_VERSION }}" >> $GITHUB_ENV
    #          echo "RUST_VERSION=${{ needs.crate_metadata.outputs.RUST_VERSION }}" >> $GITHUB_ENV
    #          echo "PUBLISH_INFO=${{ needs.crate_metadata.outputs.PUBLISH_INFO }}" >> $GITHUB_ENV
    outputs:
      NEW_TAG: ${{ env.NEW_TAG }}
      NEW_VERSION: ${{ env.NEW_VERSION }}
      GUI_NAME: ${{ env.GUI_NAME }}
      CLI_NAME: ${{ env.CLI_NAME }}
      APP_VERSION: ${{ env.APP_VERSION }}
      RUST_VERSION: ${{ env.RUST_VERSION }}
      PUBLISH_INFO: ${{ env.PUBLISH_INFO }}

  build:
    name: Build ${{ matrix.target }} (${{ matrix.os }})
    needs: crate_metadata
    runs-on: ${{ matrix.os }}
    permissions:
      #      pull-requests: write   # 'write' access to pull requests
      contents: write # We generate static HTML, JS, CSS so we need write access to the repo
      discussions: write
    #      pages: write
    #      id-token: write
    #      deployments: write
    #      statuses: write
    #      actions: write
    #      checks: read
    strategy:
      matrix:
        include:
          #          - build: linux
          #            os: ubuntu-latest
          #            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: set env
        run: |
          echo "NEW_TAG=${{ needs.crate_metadata.outputs.NEW_TAG }}" >> $GITHUB_ENV
          echo "NEW_VERSION=${{ needs.crate_metadata.outputs.NEW_VERSION }}" >> $GITHUB_ENV
          echo "GUI_NAME=${{ needs.crate_metadata.outputs.GUI_NAME }}" >> $GITHUB_ENV
          echo "CLI_NAME=${{ needs.crate_metadata.outputs.CLI_NAME }}" >> $GITHUB_ENV
          echo "APP_VERSION=${{ needs.crate_metadata.outputs.APP_VERSION }}" >> $GITHUB_ENV
          echo "RUST_VERSION=${{ needs.crate_metadata.outputs.RUST_VERSION }}" >> $GITHUB_ENV
          echo "PUBLISH_INFO=${{ needs.crate_metadata.outputs.PUBLISH_INFO }}" >> $GITHUB_ENV

          echo "MATRIX_TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          echo "MATRIX_OS=${{ matrix.os }}" >> $GITHUB_ENV

          git_branch=$(git rev-parse --abbrev-ref HEAD)
          git_sha_short=$(git rev-parse --short HEAD)
          git_branch_sha="${git_branch}-${git_sha_short}"
          echo "GIT_BRANCH=${git_branch}" >> $GITHUB_ENV
          echo "GIT_SHA_SHORT=${git_sha_short}" >> $GITHUB_ENV
          echo "GIT_BRANCH_SHA=${git_branch_sha}" >> $GITHUB_ENV

      - name: read env
        run: |
          echo "NEW_TAG: ${{ env.NEW_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "NEW_VERSION: ${{ env.NEW_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "GUI_NAME: ${{ env.GUI_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "CLI_NAME: ${{ env.CLI_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "APP_VERSION: ${{ env.APP_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "RUST_VERSION: ${{ env.RUST_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "MATRIX_TARGET: ${{ env.MATRIX_TARGET }}" >> $GITHUB_STEP_SUMMARY
          echo "GIT_BRANCH: ${{ env.GIT_BRANCH }}" >> $GITHUB_STEP_SUMMARY
          echo "GIT_SHA_SHORT: ${{ env.GIT_SHA_SHORT }}" >> $GITHUB_STEP_SUMMARY
          echo "GIT_BRANCH_SHA: ${{ env.GIT_BRANCH_SHA }}" >> $GITHUB_STEP_SUMMARY

      - name: setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: setup node
        uses: actions/setup-node@master

      - name: Install dep
        shell: bash
        run: |
          npm install
          cargo install tauri-cli

      - name: Build archive
        shell: bash
        run: |
          sh .github/build_archive.sh

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: my-artifact
      #     path: |
      #       ${{ env.asset_target }}
      #       ${{ env.asset_binary }}

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_TAG }}
          body: ${{ env.PUBLISH_INFO }}
          files: |
            ${{ env.ASSET_CLI }}
            ${{ env.ASSET_GUI }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: update formula config file
        id: update_formula
        run: |
          echo "- :white_check_mark: update formula config file" >> $GITHUB_STEP_SUMMARY
          url="https://github.com/wswenyue/ioTools/releases/download/${NEW_TAG}/${ASSET_CLI}"
          sha256=$(wget -O ioTools.tar.gz ${url} && shasum -a 256 ioTools.tar.gz | cut -d ' ' -f 1)
          echo "> version: ${NEW_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "> new_tag: ${NEW_TAG}" >> $GITHUB_STEP_SUMMARY
          echo "> url: ${url}" >> $GITHUB_STEP_SUMMARY
          echo "> sha256: ${sha256}" >> $GITHUB_STEP_SUMMARY
          rm -rf ./ioTools.tar.gz
          en_url=`echo $url |sed 's#\/#\\\/#g'`
          sed -e "s/#_version_#/${NEW_VERSION}/g; s/#_url_#/${en_url}/g; s/#_sha256_#/${sha256}/g" .github/data/ioTools.rb > formula.rb
          echo "- :arrow_double_up: upload formula file ..." >> $GITHUB_STEP_SUMMARY

      - name: upload new Formula
        uses: actions/upload-artifact@v4
        with:
          name: formula
          path: formula.rb

  homebrew:
    name: publish homebrew
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write   # 'write' access to pull requests
      contents: write # We generate static HTML, JS, CSS so we need write access to the repo
      pages: write
      id-token: write
      deployments: write
      statuses: write
      actions: write
      checks: read
    steps:
      - shell: bash
        run: |
          echo "### publish homebrew ioTools" >> $GITHUB_STEP_SUMMARY

      - name: Checkout homebrew-ioTools
        uses: actions/checkout@v4
        with:
          repository: wswenyue/homebrew-ioTools
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          persist-credentials: true
      - name: Download formula
        uses: actions/download-artifact@v4
        with:
          name: formula
      - shell: bash
        run: |
          echo "- :white_check_mark:  checkout done." >> $GITHUB_STEP_SUMMARY
          echo "- :white_check_mark:  download formula down." >> $GITHUB_STEP_SUMMARY
          cat formula.rb > Formula/iotools.rb
          rm -rf formula.rb
          echo "- :white_check_mark:  overwrite formula file." >> $GITHUB_STEP_SUMMARY
      - name: Commit files
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          ls -alh
          git status
          git commit -a -m "rebot publish commit"
          echo "- :white_check_mark:  git add and commit." >> $GITHUB_STEP_SUMMARY
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          repository: wswenyue/homebrew-ioTools
          ssh: true
          branch: ${{ github.ref }}
      - shell: bash
        run: |
          echo "- :white_check_mark:  git push succeed." >> $GITHUB_STEP_SUMMARY
          echo "### :smile: I'm so lucky to have done this. Congratulations!!! :smile:" >> $GITHUB_STEP_SUMMARY
